#!/bin/bash
#
#   `ctkey-wrapper` wraps a command in a ctkey call. It runs the ctkey command
#   and sets your AWS environment variables to the key returned then runs the
#   original command you typed.
#
#   It expects the command you want to run is symlinked to this file.
#
#   Set the `CTKEY_USERNAME` and `CTKEY_PASSWORD` environment variables in
#   .envrc.local or another suitable location.
#
#   This script will exit with error when called directly, unless the
#   CTKEY_WRAPPER_OVERRIDE environment variable is set to any value other than
#   "" or 0.
#
set -eu -o pipefail

_error() {
  declare msg="$1"

  printf "%s\n" "$msg" 1>&2
}

_is_set() {
  declare varname="$1"
  declare varvalue="$2"

  if [[ -z "$varvalue" ]]; then
    _error "$varname environment variable must be set."
    return 1
  fi
}

cmd=$(basename "$0")
if [[ $cmd = "ctkey-wrapper" ]]; then
  if [[ -n "${CTKEY_WRAPPER_OVERRIDE:-}" ]] && [[ "$CTKEY_WRAPPER_OVERRIDE" != 0 ]]; then
    cmd=$1
    shift 1
  else
    _error "This wrapper should not be called directly."
    exit 1
  fi
fi

# for convenience, don't wrap commands without arguments (no API calls)
[[ -z $* ]] && CTKEY_WRAPPER_DISABLE=true

_disable_aws_auth() {
  # unset environment variables so that aws-cli will not attempt to authenticate
  unset AWS_ACCOUNT_ID
  unset AWS_VAULT_KEYCHAIN_NAME
  unset AWS_PROFILE
}

# for convenience, don't wrap specific commands which run without AWS API calls
if [[ $cmd = aws ]] ; then
  if [[ ${*:-} = *" help "* ]] || [[ ${*:-} = *" help" ]]; then
    CTKEY_WRAPPER_DISABLE=true && _disable_aws_auth
  fi

  [[ ${1:-} = configure ]] && CTKEY_WRAPPER_DISABLE=true
fi
[[ $cmd = terraform && ${1:-} = fmt ]] && CTKEY_WRAPPER_DISABLE=true

# remove the dir this script and symlinks are in so we find the real executable
my_bin_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PATH=${PATH//$my_bin_dir:}

# check if it should be disabled
if [[ -n ${CTKEY_WRAPPER_DISABLE:-} ]]; then
  exec "$cmd" "$@"  # run without calling cloudtamer
else
  errors=0

  # check required env vars are set
  set +e
  _is_set AWS_ACCOUNT_ID "${AWS_ACCOUNT_ID:-}" ; ((errors += $?))
  _is_set CTKEY_PASSWORD "${CTKEY_PASSWORD:-}" ; ((errors += $?))
  _is_set CTKEY_USERNAME "${CTKEY_USERNAME:-}" ; ((errors += $?))
  _is_set CT_AWS_ROLE "${CT_AWS_ROLE:-}" ; ((errors += $?))
  _is_set CT_IDMS "${CT_IDMS:-}" ; ((errors += $?))
  _is_set CT_URL "${CT_URL:-}" ; ((errors += $?))
  set -e

  # check ctkey is installed
  if ! command -v ctkey &> /dev/null; then
    _error "ctkey utility not installed. please install ctkey to your path."
    (((errors++)))
  fi

  # check that the vpn is up
  proxy_running="$(docker ps --quiet --filter "ancestor=openconnect-tinyproxy" --filter "status=running")"
  if [[ -z "$proxy_running" ]]; then
    _error "Openconnect-tinyproxy container not running."
    (((errors++)))
  fi

  # die if there were any errors
  if [[ "$errors" -gt 0 ]] ; then
    exit "$errors"
  fi

  # get the cloudtamer access key and run the command
  unset AWS_PROFILE
  eval "$(https_proxy=localhost:8888 ctkey setenv --url="${CT_URL}" --account="${AWS_ACCOUNT_ID}" --idms="${CT_IDMS}" --iam-role="${CT_AWS_ROLE}")"
  exec "$cmd" "$@"
fi
